//Merge Sort
//time complexity : O(nLogn)
//space complexity : O(n)
class Solution 
{
  public:
    void merge(vector<int> &arr, int low, int mid, int high)
    {
        vector<int> temp;
        int left = low;
        int right = mid+1;
        
        while(left <= mid && right <= high)
        {
            if(arr[left] <= arr[right])
            {
                temp.push_back(arr[left]);
                left++;
            }
            else if(arr[left] > arr[right])
            {
                temp.push_back(arr[right]);
                right++;
            }
        }
        
        //if left array have some element left
        while(left <= mid)
        {
            temp.push_back(arr[left]);
            left++;
        }
        
        //if right array have some element left
        while(right <= high)
        {
            temp.push_back(arr[right]);
            right++;
        }
        
        //now copy from temp array to original array
        for(int i = low; i<=high; i++)
        {
            arr[i] = temp[i-low];
        }
        
    }
    
    void mergeSort(vector<int>& arr, int low, int high) 
    {
        //base case
        if(low >= high)
        {
            return;
        }
        
        int mid = (low + high)/2;          //find mid
        mergeSort(arr, low, mid);     //sort left portion
        mergeSort(arr, mid+1, high);  //sort right portion
        
        //now merge two sorted array
        merge(arr, low, mid, high);
    }
};
